# Lista para armazenar os gastos (cada gasto ser√° um dicion√°rio com "descricao" e "valor")
gastos = []

# Fun√ß√£o que exibe o menu principal do programa
def exibir_menu():
    print("\n-------- Controle de Gastos --------")
    print("1 - Adicionar gasto") # Permite adicionar um novo gasto
    print("2 - Visualizar gastos") # Mostra todos os gastos registrados
    print("3 - Remover gasto") # Remove um gasto da lista
    print("4 - Exibir total gasto")# Mostra o total gasto at√© o momento
    print("5 - Sair") # Encerra o programa
    print("------------------------------------")

# Fun√ß√£o para adicionar um novo gasto √† lista
def adicionar_gasto():
    descricao = input("Descri√ß√£o do gasto: ") # Usu√°rio informa do que se trata o gasto

    while True: # La√ßo para garantir que o valor inserido seja v√°lido
        try:
            valor = float(input("Valor do gasto (R$): ")) # Usu√°rio insere o valor
            break # Se a convers√£o para float funcionar, sai do loop
        except ValueError:
            print("Por favor, insira um valor v√°lido!") # Caso o usu√°rio digite algo inv√°lido

    # Adiciona um dicion√°rio com os detalhes do gasto √† lista
    gastos.append({"descricao": descricao, "valor": valor})
    print("‚úÖ Gasto adicionado com sucesso!")

# Fun√ß√£o para exibir todos os gastos cadastrados
def visualizar_gastos():
    if not gastos: # Se a lista de gastos estiver vazia, exibe a mensagem
        print("Nenhum gasto registrado ainda.")
        return

    print("\nüìú Lista de Gastos:")
    for i, gasto in enumerate(gastos): # Percorre a lista mostrando cada gasto
        print(f"{i+1}. {gasto['descricao']} - R$ {gasto['valor']:.2f}")

# Fun√ß√£o para remover um gasto espec√≠fico
def remover_gasto():
    visualizar_gastos() # Exibe a lista para que o usu√°rio saiba qual remover
    if not gastos: # Se n√£o houver gastos, retorna sem fazer nada
        return

    try:
        indice = int(input("Digite o n√∫mero do gasto para remover: ")) - 1
        if 0 <= indice < len(gastos): # Verifica se o n√∫mero digitado √© v√°lido
            removido = gastos.pop(indice) # Remove o gasto da lista
            print(f"‚ùå Gasto '{removido['descricao']}' removido!")
        else:
            print("N√∫mero inv√°lido!") # Caso o n√∫mero digitado n√£o corresponda a um gasto v√°lido
    except ValueError:
        print("Digite um n√∫mero v√°lido!") # Caso o usu√°rio digite algo que n√£o seja um n√∫mero

# Fun√ß√£o para calcular e exibir o total gasto at√© o momento
def exibir_total():
    total = sum(gasto["valor"] for gasto in gastos) # Soma os valores dos gastos registrados
    print(f"\nüí∞ Total gasto: R$ {total:.2f}")

# Loop principal do programa, que mant√©m o menu ativo at√© o usu√°rio escolher sair
while True:
    try:
        exibir_menu() # Mostra o menu para o usu√°rio
        opcao = int(input(": ")) # Usu√°rio escolhe uma op√ß√£o

        if opcao not in range(1, 6): # Garante que a op√ß√£o esteja entre 1 e 5
            print("Insira um n√∫mero de 1 at√© 5!\n")
            continue # Volta ao in√≠cio do loop sem executar o match-case

        # Estrutura match-case para executar a a√ß√£o correspondente √† op√ß√£o escolhida
        match opcao:
            case 1:
                adicionar_gasto() # Chama a fun√ß√£o para adicionar um gasto
            case 2:
                visualizar_gastos() # Chama a fun√ß√£o para visualizar os gastos
            case 3:
                remover_gasto() # Chama a fun√ß√£o para remover um gasto
            case 4:
                exibir_total() # Chama a fun√ß√£o para exibir o total gasto
            case 5:
                print("Saindo do programa...") # Mensagem de sa√≠da
                break # Encerra o loop, finalizando o programa

    except ValueError:
        print("Digite um N√öMERO de 1 at√© 5, por favor n√£o insira letras!\n") # Tratamento de erro caso o usu√°rio digite algo inv√°lido